// src/bot/medals/medals-sync.manual.ts
import { NestFactory } from '@nestjs/core';
import { AppModule } from '../../app.module';
import { BotService } from '../bot.service';
import { MedalsService } from './medals.service';
import { Logger } from '@nestjs/common';

async function runMedalsSync() {
  const logger = new Logger('MedalsSyncManual');

  try {
    logger.log('üèÖ Iniciando sincroniza√ß√£o manual de medalhas...');

    // Criar a aplica√ß√£o NestJS
    const app = await NestFactory.createApplicationContext(AppModule, {
      logger: ['log', 'error', 'warn', 'debug', 'verbose'],
    });

    // Obter os servi√ßos necess√°rios
    const botService = app.get(BotService);
    const medalsService = app.get(MedalsService);

    logger.log('üì° Conectando bot Discord...');

    // Aguardar o bot ficar pronto
    const client = botService.getClient();

    if (!client.isReady()) {
      logger.log('‚è≥ Aguardando bot ficar pronto...');

      await new Promise<void>((resolve, reject) => {
        const timeout = setTimeout(() => {
          reject(new Error('Timeout aguardando bot ficar pronto'));
        }, 30000);

        client.once('ready', () => {
          clearTimeout(timeout);
          logger.log('‚úÖ Bot est√° pronto!');
          resolve();
        });

        client.once('error', (error) => {
          clearTimeout(timeout);
          reject(error);
        });
      });
    } else {
      logger.log('‚úÖ Bot j√° est√° pronto!');
    }

    // Gerar relat√≥rio antes da sincroniza√ß√£o
    logger.log('üìä Gerando relat√≥rio inicial...');
    const initialReport = await medalsService.generateMedalsReport();

    logger.log('üìà Relat√≥rio Inicial:');
    logger.log(
      `   üë• Usu√°rios eleg√≠veis: ${initialReport.summary.totalEligible}`,
    );
    logger.log(
      `   üéØ Com on-duty registrado: ${initialReport.summary.totalWithOnDuty}`,
    );
    logger.log(
      `   üìÖ Tempo m√©dio de servi√ßo: ${initialReport.summary.avgServiceMonths} meses`,
    );

    // Executar sincroniza√ß√£o completa
    logger.log('üîÑ Executando sincroniza√ß√£o completa...');
    await medalsService.syncCavalryData(client);

    // Buscar usu√°rios eleg√≠veis atualizados
    logger.log('üèÖ Buscando usu√°rios eleg√≠veis atualizados...');
    const eligibleUsers = await medalsService.getEligibleUsers();

    // Gerar relat√≥rio final
    logger.log('üìä Gerando relat√≥rio final...');
    const finalReport = await medalsService.generateMedalsReport();

    logger.log('\nüìà Relat√≥rio Final de Medalhas:');
    logger.log(
      `   üë• Total de usu√°rios eleg√≠veis: ${finalReport.summary.totalEligible}`,
    );
    logger.log(
      `   üéØ Com on-duty registrado: ${finalReport.summary.totalWithOnDuty}`,
    );
    logger.log(
      `   üìÖ Tempo m√©dio de servi√ßo: ${finalReport.summary.avgServiceMonths} meses`,
    );

    if (eligibleUsers.length > 0) {
      logger.log('\nüèÖ Distribui√ß√£o de Medalhas Eleg√≠veis:');

      const medalConfigs = medalsService.getMedalConfigs();

      for (const [medalType, count] of Object.entries(
        finalReport.medalDistribution,
      )) {
        const config = medalConfigs.find((c) => c.type === medalType);
        logger.log(`   ${config?.emoji} ${config?.title}: ${count} usu√°rio(s)`);
      }

      // Calcular b√¥nus total dispon√≠vel
      let totalBonusAvailable = 0;
      eligibleUsers.forEach((user) => {
        user.eligibleMedals.forEach((medal) => {
          totalBonusAvailable += medal.bonusAmount;
        });
      });

      logger.log(
        `\nüí∞ B√¥nus Total Dispon√≠vel: $${totalBonusAvailable.toLocaleString('pt-BR')}`,
      );

      logger.log('\nüìã Lista de Usu√°rios Eleg√≠veis:');
      logger.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');

      eligibleUsers.forEach((user, index) => {
        logger.log(`\n${index + 1}. ${user.nickname} (${user.patente})`);
        logger.log(
          `   üèá Entrou no servidor: ${user.joinedServerAt.toLocaleDateString('pt-BR')}`,
        );
        logger.log(`   ‚è∞ Tempo de servi√ßo: ${user.serviceTime}`);
        logger.log(`   üéØ √öltimo on-duty: ${user.onDutyStatus}`);
        logger.log(`   üèÖ Medalhas eleg√≠veis:`);

        user.eligibleMedals.forEach((medal) => {
          logger.log(
            `      ${medal.emoji} ${medal.title} - ${medal.bonusAmount}`,
          );
        });
      });

      // Identificar usu√°rios sem on-duty
      const usersWithoutOnDuty = eligibleUsers.filter(
        (user) => user.lastOnDutyDate === null,
      );

      if (usersWithoutOnDuty.length > 0) {
        logger.log('\n‚ö†Ô∏è Usu√°rios Eleg√≠veis sem Registro de On-Duty:');
        usersWithoutOnDuty.forEach((user) => {
          logger.log(
            `   ‚ùì ${user.nickname} (${user.patente}) - ${user.serviceTime}`,
          );
        });
        logger.log(
          '\nüí° Dica: Estes usu√°rios podem precisar de verifica√ß√£o manual do hist√≥rico.',
        );
      }

      // Sugest√µes
      logger.log('\nüéØ Pr√≥ximas A√ß√µes Sugeridas:');
      logger.log('   1. Revisar lista de usu√°rios eleg√≠veis');
      logger.log('   2. Usar dashboard web para conceder medalhas');
      logger.log('   3. Verificar usu√°rios sem on-duty registrado');
      logger.log(
        '   4. Executar novamente ap√≥s concess√µes para atualizar dados',
      );
    } else {
      logger.log('\n‚ö†Ô∏è Nenhum usu√°rio eleg√≠vel encontrado');
      logger.log('üí° Verifique se:');
      logger.log('   - O cargo de cavalaria est√° configurado corretamente');
      logger.log('   - Os usu√°rios t√™m pelo menos 1 m√™s de servi√ßo');
      logger.log('   - A sincroniza√ß√£o foi executada corretamente');
    }

    logger.log('\n‚úÖ Sincroniza√ß√£o manual de medalhas conclu√≠da com sucesso!');

    // Fechar a aplica√ß√£o
    await app.close();
    process.exit(0);
  } catch (error) {
    logger.error('‚ùå Erro durante a sincroniza√ß√£o de medalhas:', error);

    if (error instanceof Error) {
      logger.error(`   Mensagem: ${error.message}`);
      logger.error(`   Stack: ${error.stack}`);
    }

    process.exit(1);
  }
}

// Executar o script se for chamado diretamente
if (require.main === module) {
  console.log('üöÄ Executando sincroniza√ß√£o manual de medalhas...');
  runMedalsSync();
}

export { runMedalsSync };
